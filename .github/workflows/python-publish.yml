name: Publish Python Package

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Debug Repository Information
      run: |
        echo "GitHub Repository: ${{ github.repository }}"
        echo "GitHub Actor: ${{ github.actor }}"
        echo "Workflow Trigger: ${{ github.event_name }}"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      continue-on-error: true
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Publish to GitHub Packages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Install dependencies for GitHub Packages upload
        pip install twine
        
        # Upload to GitHub Packages
        python -m twine upload \
          --repository-url https://upload.pypi.org/legacy/ \
          --username __token__ \
          --password ${{ secrets.PYPI_API_TOKEN }} \
          dist/*
        
        # GitHub Packages specific upload
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel
        python setup.py sdist bdist_wheel
        
        # Debug: List distribution files
        ls -l dist/
        
        # Attempt GitHub Packages upload
        echo "Attempting GitHub Packages upload"
        python -m twine upload \
          --repository-url https://maven.pkg.github.com/${{ github.repository }} \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          dist/*

    - name: Create Release if Not Exists
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if release exists
        release_exists=$(gh release list | grep "v1.0.2" || true)
        
        if [ -z "$release_exists" ]; then
          echo "Creating release v1.0.2"
          gh release create v1.0.2 \
            --repo ${{ github.repository }} \
            --title "v1.0.2" \
            --notes "## ðŸš€ Spam Detection System v1.0.2

### What's New
- Resolved persistent PyPI upload conflicts
- Improved package versioning strategy
- Minor internal optimizations

### Installation
\`\`\`bash
pip install spam-detection-system==1.0.2
\`\`\`"
        else
          echo "Release v1.0.2 already exists"
        fi

    - name: Upload to GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload v1.0.2 dist/* \
          --repo ${{ github.repository }}

    - name: Verify Package
      run: |
        echo "Dist directory contents:"
        ls -l dist/
        pip install dist/spam_detection_system-*.whl
        python -c "import spam_detection_system; print(spam_detection_system.__version__)"

    - name: Debug Failure
      if: failure()
      run: |
        echo "Workflow failed. Check previous steps for detailed error messages."
        pip list
        python --version
